# Check Docker CPU Arch on MacOS vs AKS
docker buildx ls
docker buildx build --platform linux/amd64,linux/arm64 -t your-image-name .
kubectl get nodes -o wide

# Create an AKS Cluster
az login
az configure --defaults location=eastus
az account set --subscription 6c7468cd-25f8-4a01-8c49-4736f5de41c6
az group create --name aks-rg --location eastus
az aks create \
    --resource-group aks-rg \
    --name aks-cluster \
    --node-count 1 \
    --node-vm-size standard_b2s \
    --node-osdisk-size 32 \
    --enable-addons monitoring \
    --generate-ssh-keys

# Connect using CLI from AKS portal

# Install Ingress Controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

# Get Public IPv4 of the Ingress Controller
kubectl get svc -n ingress-nginx ingress-nginx-controller
az network public-ip list --resource-group mc_aks-rg_aks-cluster_eastus --query "[].{Name:name, IP: ipAddress}"

# Create DNS zone records using Public IPv4 from previous step
az network dns zone create -g aks-rg -n nrimate.com
az network dns zone create -g aks-rg -n arewein.com
az network dns record-set a add-record --resource-group aks-rg --zone-name nrimate.com --record-set-name "@" --ipv4-address 172.171.165.124
az network dns record-set a add-record --resource-group aks-rg --zone-name arewein.com --record-set-name "@" --ipv4-address 172.171.165.124
az network dns record-set cname set-record --resource-group aks-rg --zone-name nrimate.com --record-set-name www --cname nrimate.com --ttl 3600
az network dns record-set cname set-record --resource-group aks-rg --zone-name arewein.com --record-set-name www --cname arewein.com --ttl 3600

# Install cert-manager
helm repo add jetstack https://charts.jetstack.io
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.14.4 \
  --set prometheus.enabled=false\
  --set webhook.timeoutSeconds=4
  
# Deploy App arewein
kubectl create namespace arewein
kubectl apply -f arewein-app/clusterissuer-lets-encrypt-arewein.yaml
kubectl apply -f arewein-app/backend-env-configmap.yaml
kubectl apply -f arewein-app/backend-deployment.yaml
kubectl apply -f arewein-app/backend-service.yaml
kubectl apply -f arewein-app/frontend-deployment.yaml
kubectl apply -f arewein-app/frontend-service.yaml
kubectl apply -f arewein-app/ingress.yaml

# Deploy App nrimate
kubectl create namespace nrimate
kubectl apply -f nrimate-app/clusterissuer-lets-encrypt-nrimate.yaml
kubectl apply -f nrimate-app/backend-env-configmap.yaml
kubectl apply -f nrimate-app/backend-deployment.yaml
kubectl apply -f nrimate-app/backend-service.yaml
kubectl apply -f nrimate-app/frontend-deployment.yaml
kubectl apply -f nrimate-app/frontend-service.yaml
kubectl apply -f nrimate-app/ingress.yaml

# Verify
kubectl get issuers -n nrimate
kubectl get issuers -n arewein

kubectl describe issuer letsencrypt-arewein -n arewein
kubectl describe issuer letsencrypt-nrimate -n nrimate

kubectl get certificates -n arewein
kubectl get certificates -n nrimate

kubectl describe certificate arewein-tls -n arewein
kubectl describe certificate nrimate-tls -n nrimate

kubectl get certificaterequests -n arewein -n arewein
kubectl get certificaterequests -n nrimate -n nrimate

kubectl describe certificaterequest arewein-tls -n arewein
kubectl describe certificaterequest nrimate-tls -n nrimate

curl -kivL -H 'Host: arewein.com' 'http://172.171.165.124'
curl -kivL -H 'Host: nrimate.com' 'http://172.171.165.124'


